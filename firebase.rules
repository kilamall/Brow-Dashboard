rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAdmin() {
      return request.auth != null && request.auth.token.role == 'admin';
    }

    match /settings/{doc} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /services/{id} {
      allow read: if true;
      allow write, delete, create: if isAdmin();
    }

    match /serviceCategories/{id} {
      allow read: if true;
      allow write, delete, create: if isAdmin();
    }

    match /customers/{id} {
      // SECURED: Require auth for customer creation
      allow read: if isAdmin() || 
        (request.auth != null && 
         (request.auth.token.email == resource.data.email ||
          request.auth.token.phone_number == resource.data.phone));
      
      // Allow authenticated creation only
      allow create: if request.auth != null;
      
      allow update: if isAdmin() || 
        (request.auth != null && 
         (request.auth.token.email == resource.data.email ||
          request.auth.token.phone_number == resource.data.phone));
      allow delete: if isAdmin();
    }

    match /appointments/{id} {
      // SECURED: Only admins and appointment owners can read
      // Allow customers to read appointments by customerId (document ID) or auth UID
      allow read: if isAdmin() || 
        (request.auth != null && 
         // Check if customer exists and matches authenticated user
         (exists(/databases/$(database)/documents/customers/$(resource.data.customerId)) &&
          (get(/databases/$(database)/documents/customers/$(resource.data.customerId)).data.email == request.auth.token.email ||
           get(/databases/$(database)/documents/customers/$(resource.data.customerId)).data.phone == request.auth.token.phone_number)));
      
      // SECURED: Allow admins to create appointments directly
      allow create: if isAdmin();
      
      allow update: if isAdmin() || 
        (request.auth != null && 
         resource.data.customerId != null &&
         request.resource.data.status == 'cancelled');
      allow delete: if isAdmin();
    }

    match /availability/{id} {
      // PUBLIC: Read-only for booking availability
      // Contains only time slots, no customer data
      allow read: if true;
      
      // SECURED: Write only via Cloud Functions or triggers
      allow write: if false; // Cloud Functions use Admin SDK (bypasses rules)
    }

    match /holds/{id} {
      // SECURED: Read for availability, write via Cloud Functions ONLY
      allow read: if true;
      allow write: if false;  // Cloud Functions use Admin SDK (bypasses rules)
      allow delete: if false;
    }

    match /messages/{id} {
      allow read: if isAdmin() || 
        (request.auth != null && 
         request.auth.uid == resource.data.customerId);
      allow create: if request.auth != null &&
        request.resource.data.content is string &&
        request.resource.data.type in ['customer', 'admin'] &&
        request.resource.data.customerName is string &&
        request.resource.data.customerEmail is string &&
        request.resource.data.customerId is string;
      allow update: if isAdmin();
    }

    match /reviews/{id} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /conversations/{id} {
      allow read: if isAdmin() || 
        (request.auth != null && 
         request.auth.uid == resource.data.customerId);
      allow create: if request.auth != null && 
        request.resource.data.customerId is string &&
        request.resource.data.customerName is string;
      allow update: if isAdmin() || 
        (request.auth != null && 
         request.auth.uid == resource.data.customerId);
    }

    match /customer_tokens/{id} {
      allow read, write: if isAdmin() || 
        (request.auth != null && 
         request.auth.uid == resource.data.customerId);
      allow create: if request.resource.data.customerId is string &&
        request.resource.data.token is string;
    }

    match /sms_conversations/{id} {
      allow read: if isAdmin();
      allow create: if request.auth != null;
    }

    match /staff/{id} {
      allow read, write, delete: if isAdmin();
    }

    match /sms_logs/{id} {
      allow read, write: if isAdmin();
    }

    match /ai_conversations/{id} {
      allow read: if isAdmin() || 
        (request.auth != null && 
         request.auth.uid == resource.data.customerId);
      allow create: if request.auth != null;
      allow update: if isAdmin();
    }

    match /ai_sms_conversations/{id} {
      allow read: if isAdmin() || 
        (request.auth != null && 
         request.auth.uid == resource.data.customerId);
      allow create: if request.auth != null;
      allow update: if isAdmin();
    }

    match /email_subscriptions/{id} {
      allow read: if isAdmin();
      allow create: if true;
      allow update, delete: if isAdmin();
    }

    match /sms_consents/{id} {
      allow read: if isAdmin();
      allow create: if true;
      allow update, delete: if isAdmin();
    }

    match /skinAnalyses/{id} {
      // Allow read if admin OR if customer document matches auth email/phone
      allow read: if isAdmin() || 
        (request.auth != null && 
         exists(/databases/$(database)/documents/customers/$(resource.data.customerId)) &&
         (get(/databases/$(database)/documents/customers/$(resource.data.customerId)).data.email == request.auth.token.email ||
          get(/databases/$(database)/documents/customers/$(resource.data.customerId)).data.phone == request.auth.token.phone_number));
      
      // Allow create if authenticated and customerId is provided
      allow create: if request.auth != null && 
        request.resource.data.customerId is string;
      
      // Allow update if admin OR if customer document matches auth email/phone
      allow update: if isAdmin() || 
        (request.auth != null && 
         exists(/databases/$(database)/documents/customers/$(resource.data.customerId)) &&
         (get(/databases/$(database)/documents/customers/$(resource.data.customerId)).data.email == request.auth.token.email ||
          get(/databases/$(database)/documents/customers/$(resource.data.customerId)).data.phone == request.auth.token.phone_number));
      
      allow delete: if isAdmin();
    }

    match /skinAnalysisRequests/{id} {
      // Allow read if admin OR if customer document matches auth email/phone
      allow read: if isAdmin() || 
        (request.auth != null && 
         exists(/databases/$(database)/documents/customers/$(resource.data.customerId)) &&
         (get(/databases/$(database)/documents/customers/$(resource.data.customerId)).data.email == request.auth.token.email ||
          get(/databases/$(database)/documents/customers/$(resource.data.customerId)).data.phone == request.auth.token.phone_number));
      
      // Allow create if authenticated and customerId is provided
      allow create: if request.auth != null && 
        request.resource.data.customerId is string;
      
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /ai_analysis_cache/{id} {
      allow read, write: if false; // Only Cloud Functions can access cache
    }

    match /appointmentEditRequests/{id} {
      // Allow read if admin OR if customer document matches auth email/phone
      allow read: if isAdmin() || 
        (request.auth != null && 
         exists(/databases/$(database)/documents/customers/$(resource.data.customerId)) &&
         (get(/databases/$(database)/documents/customers/$(resource.data.customerId)).data.email == request.auth.token.email ||
          get(/databases/$(database)/documents/customers/$(resource.data.customerId)).data.phone == request.auth.token.phone_number));
      
      allow create: if request.auth != null && 
        request.resource.data.customerId is string &&
        request.resource.data.appointmentId is string &&
        request.resource.data.requestedChanges is map;
      
      allow update: if isAdmin();
      
      // Allow delete if admin OR if customer document matches auth email/phone
      allow delete: if isAdmin() || 
        (request.auth != null && 
         exists(/databases/$(database)/documents/customers/$(resource.data.customerId)) &&
         (get(/databases/$(database)/documents/customers/$(resource.data.customerId)).data.email == request.auth.token.email ||
          get(/databases/$(database)/documents/customers/$(resource.data.customerId)).data.phone == request.auth.token.phone_number));
    }

    // Consent Form Templates - Only admins can manage templates
    match /consentFormTemplates/{id} {
      allow read: if true; // Public read so customers can view consent forms during booking
      allow create, update, delete: if isAdmin();
    }

    // Customer Consent Records
    match /customerConsents/{id} {
      // Admins can read all consents
      // Customers can read their own consents by matching customer ID
      allow read: if isAdmin() || 
        (request.auth != null && 
         request.auth.uid == resource.data.customerId);
      
      // Allow both authenticated users and guests to create consent records
      // This is necessary for the booking flow to work for all users
      allow create: if request.auth != null || 
        (request.resource.data.customerName is string &&
         request.resource.data.consentFormId is string &&
         request.resource.data.agreed == true);
      
      // Only admins can update or delete consent records (immutable audit trail)
      allow update, delete: if isAdmin();
    }

    // Email Verification Codes - Only Cloud Functions can access
    match /email_verification_codes/{id} {
      allow read, write: if false; // Only Cloud Functions can access
    }

    // Day Closures - Admin only
    match /dayClosures/{id} {
      allow read: if true; // Public can read to check if shop is closed
      allow create, update, delete: if isAdmin();
    }

    // Special Hours - Admin only
    match /specialHours/{id} {
      allow read: if true; // Public can read to check special hours
      allow create, update, delete: if isAdmin();
    }
  }
}