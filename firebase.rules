rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAdmin() {
      return request.auth != null && request.auth.token.role == 'admin';
    }

    match /settings/{doc} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /services/{id} {
      allow read: if true;
      allow write, delete, create: if isAdmin();
    }

    match /customers/{id} {
      // Only allow admins and authenticated users to read their own data
      allow read: if isAdmin() || 
        (request.auth != null && 
         request.auth.token.email == resource.data.email);
      // Allow public creation for guest bookings (Cloud Function handles this server-side)
      // Note: Guest users can't read customers, so they use Cloud Function to check/create
      allow create: if true;
      allow update: if isAdmin() || 
        (request.auth != null && 
         request.auth.token.email == resource.data.email);
      allow delete: if isAdmin();
    }

    match /appointments/{id} {
      allow read: if true; // Public read for availability checking
      allow create: if true; // Allow guest bookings
      allow update: if isAdmin() || 
        (request.auth != null && 
         resource.data.customerId != null &&
         // Allow clients to update their own appointments (e.g., cancel)
         request.resource.data.status == 'cancelled');
      allow delete: if isAdmin();
    }

    match /holds/{id} {
      allow read: if true;
      allow write: if true; // Allows Cloud Functions to manage holds
      allow delete: if true;
    }

    match /messages/{id} {
      allow read: if isAdmin() || 
        (request.auth != null && 
         request.auth.uid == resource.data.customerId);
      allow create: if request.auth != null &&
        request.resource.data.customerId is string &&
        request.resource.data.content is string &&
        request.resource.data.type in ['customer', 'admin'];
      allow update: if isAdmin();
    }

    match /reviews/{id} {
      allow read: if true; // Public read for displaying reviews
      allow create: if true; // Allow anyone to submit reviews
      allow update: if isAdmin(); // Only admins can approve/edit reviews
      allow delete: if isAdmin();
    }

    match /conversations/{id} {
      allow read: if isAdmin() || 
        (request.auth != null && 
         request.auth.uid == resource.data.customerId);
      allow create, update: if isAdmin();
    }

    match /customer_tokens/{id} {
      allow read, write: if isAdmin() || 
        (request.auth != null && 
         request.auth.uid == resource.data.customerId);
    }

    match /sms_conversations/{id} {
      allow read: if isAdmin();
      allow create: if request.auth != null;
    }

    match /sms_logs/{id} {
      allow read, write: if isAdmin();
    }

    match /ai_conversations/{id} {
      allow read: if isAdmin() || 
        (request.auth != null && 
         request.auth.uid == resource.data.customerId);
      allow create: if request.auth != null;
      allow update: if isAdmin();
    }

    match /ai_sms_conversations/{id} {
      allow read: if isAdmin() || 
        (request.auth != null && 
         request.auth.uid == resource.data.customerId);
      allow create: if request.auth != null;
      allow update: if isAdmin();
    }

    match /email_subscriptions/{id} {
      allow read: if isAdmin();
      allow create: if true; // Public subscription
      allow update, delete: if isAdmin();
    }

    match /sms_consents/{id} {
      allow read: if isAdmin();
      allow create: if true; // Public SMS consent
      allow update, delete: if isAdmin();
    }

    match /skinAnalyses/{id} {
      // Only authenticated users can create and view their own analyses
      // Admins have full access
      allow read: if isAdmin() || 
        (request.auth != null && 
         request.auth.uid == resource.data.customerId);
      allow create: if request.auth != null && 
        request.resource.data.customerId == request.auth.uid;
      allow update: if isAdmin() || 
        (request.auth != null && 
         request.auth.uid == resource.data.customerId);
      allow delete: if isAdmin();
    }
  }
}